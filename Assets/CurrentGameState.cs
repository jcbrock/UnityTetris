//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
namespace AssemblyCSharp
{
		//Bit flag
		[Flags()]
		public enum GameState : int
		{
				None = 1,
				Paused = 2,
				Running = 4,
				Ended = 8,
				AIMode = 16				
		}
		;
		public enum ChangeGameState
		{
				None,
				ClearGame,
				EndGame,
				PauseGame,
				ResumeGame,
				StartGame,
				RunAIMode,
				PauseAIMode
	}
		;

		//paused
		//running
		//ended

		//pause  to paused
		//resume to running
		//start to running
		//end to ended

		public class GameInfoPacket
		{
				public GameInfoPacket (int shapeCount, GameState gameState)
				{
						CurrentPlacedShapeCount = shapeCount;
						CurrentGameState = gameState;
				}
				public int CurrentPlacedShapeCount;
				public GameState CurrentGameState;				
		}

		public class CurrentGameState : UnityEngine.MonoBehaviour, ISceneObserver
		{
				private List<AssemblyCSharp.IStateObserver> registeredObservers = new List<AssemblyCSharp.IStateObserver> ();
				private int mCurrentPlacedShapeCount;
				private GameState mCurrentGameState;
			
				CurrentGameState ()
				{
						//Register with publishers
						
				}
				void Start ()
				{
						UnityEngine.GameObject go = UnityEngine.GameObject.Find ("GameObject");
						//DelegateMenu menuController = (DelegateMenu)go.GetComponent (typeof(DelegateMenu));
						//menuController.RegisterObserver (this);										
						SceneManager gameStateController = (SceneManager)go.GetComponent (typeof(SceneManager));
						gameStateController.RegisterObserver (this);
				}
				//void Update ()
				//{
				//Do nothing. Need to have MonoBehavior interface to attach to a game object
				//}
				void ISceneObserver.notify (GameInfoPacket gameInfoPacket)
				{					
						mCurrentPlacedShapeCount = gameInfoPacket.CurrentPlacedShapeCount;
						if ((mCurrentGameState == GameState.Running || mCurrentGameState == GameState.Paused) &&
								gameInfoPacket.CurrentGameState == GameState.Ended) {
								HandleEndOfGame ();
						}						
				}
		
				/*	void IMenuObserver.notify (ChangeGameState newState)
				{					
						//Handle new state - update internal state, send to UnityTetris						
						switch (newState) {
						case ChangeGameState.PauseGame:
								{
										mCurrentGameState = GameState.Paused;
										break;
								}
						case ChangeGameState.ResumeGame:	
								{
										mCurrentGameState = GameState.Running;
										break;
								}
						case ChangeGameState.StartGame:	
								{
										mCurrentGameState = GameState.Running;
										break;
								}
						case ChangeGameState.EndGame:	
								{
										HandleEndOfGame ();
										break;

								}
						case ChangeGameState.RunAIMode:	
								{
										mCurrentGameState = GameState.AIModeAndRunning;
										break;
				
								}
						case ChangeGameState.PauseAIMode:	
								{
										mCurrentGameState = GameState.AIModeAndPaused;
										break;
				
								}
						case ChangeGameState.ClearGame:	
								{
										break; //TODO
								}
						}
						NotifyObservers ();
				}
*/
				private void HandleEndOfGame ()
				{
			
						//Game ended, handle stuff - TODO
						mCurrentGameState = GameState.Ended;
				}

				public void RegisterObserver (AssemblyCSharp.IStateObserver observer)
				{
						registeredObservers.Add (observer);
				}
				public void UnregisterObserver (AssemblyCSharp.IStateObserver observer)
				{
						registeredObservers.Remove (observer);
				}
				private void NotifyObservers ()
				{
						foreach (AssemblyCSharp.IStateObserver observer in registeredObservers) {
								observer.notify (new GameInfoPacket (mCurrentPlacedShapeCount, mCurrentGameState));
						}		
				}		

		}


}

