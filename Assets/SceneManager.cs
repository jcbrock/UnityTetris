//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1022
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated. 
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
namespace AssemblyCSharp
{
		public class SceneManager// : UnityEngine.MonoBehaviour
		{
				public Shape currentShape;
				private System.Collections.ArrayList listOfShapes = new System.Collections.ArrayList ();
				public int placedBlockCount = 0;
				private ShapeFactory factory;
				private bool isGamePaused = false;

				public SceneManager ()
				{
						//grid = new int[10, 25];					
						//listOfShapes.Add (new Shape (UnityEngine.GameObject.Find ("TestCD2")));
						factory = new ShapeFactory ();
				}

				public void StartNewGame ()
				{												
						currentShape = factory.SpawnRandomizedTetrisShape ();
				}

				public void PauseGame ()
				{
						isGamePaused = true;
				}

				public void ResumeGame ()
				{
						isGamePaused = false;
				}

				public void EndGame ()
				{
						//todo - write score somewhere for the leaderboard						
						foreach (Shape s in listOfShapes) {
								s.DeleteShape ();
						}
						currentShape.DeleteShape ();
						listOfShapes.Clear ();						
						currentShape = null;
						placedBlockCount = 0;
				}

				public void Tick ()
				{			
						if (isGamePaused || currentShape == null)
								return;
						//currentShape.Tick();
						//UnityEngine.Debug.Log (currentBlock.gameObject.transform.position);
						//bool collided = false;

						if (AnyCollisions (0, -1)) {
								++placedBlockCount;
								listOfShapes.Add (currentShape); //might need to copy it explictly
								currentShape.disablePlayerControls ();
								currentShape = factory.SpawnRandomizedTetrisShape ();

						} else {
								currentShape.translate (0, -1, 0);
						}
				}

				//todo - cant just be on tick, gotta be on control movement too...
				public bool AnyCollisions (float xDelta, float yDelta)
				{
						if (currentShape.isCollidingWithBotWall ())
								return true;

						foreach (Shape shape in listOfShapes) { //for each object in the scene that is colliable
								if (currentShape.collides (shape, xDelta, yDelta))
										return true;
						}

						return false;
				}
		}
}

