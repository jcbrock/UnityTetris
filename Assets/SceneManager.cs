//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1022
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated. 
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using Newtonsoft.Json;
using System.Linq;
namespace AssemblyCSharp
{
		//TODO - break out into another file
		public class LeaderboardScore
		{
				public string Name { get; set; }
				public int Score { get; set; }
				public DateTime Date  { get; set; }
				public string Version { get; set; }
		
				public LeaderboardScore (string name, int score, DateTime date, string version)
				{
						Name = name;
						Score = score;
						Date = date;
						Version = version;
				}
		}
		
		//The SceneManager class is responsible for
		// - game state
		// - main game tick function
		//TODO - also fix some using of member varibles as globals more like
		public class SceneManager
		{
				enum GameState
				{
						None,
						Paused,
						Running
				}

				//Used to make debug print statements unique
				static int foo = 0;
		
				//For these member variables surfaced outside of class, only expose as read-only
				public Shape CurrentShape { get { return m_CurrentShape; } }
				public List<LeaderboardScore> HighScores { get { return m_HighScores; } }
				public int PlacedBlockCount { get { return m_PlacedBlockCount; } }
		
				private ShapeFactory m_Factory;
				private Shape m_CurrentShape;
				private Shape m_PreviewShape;
				private List<LeaderboardScore> m_HighScores = new List<LeaderboardScore> ();
				private int m_PlacedBlockCount = 0;				
				private bool m_IsGameOver = false;
				private System.Collections.ArrayList m_ListOfShapes = new System.Collections.ArrayList ();
				private static int m_ColumnCount = 8; //must match the Unity grid
				private static int m_RowCount = 24;
				public TetrisBitArray m_SceneGrid = new TetrisBitArray (m_RowCount, m_ColumnCount);
		
				private Queue<UnityTetris.SceneRequestInfo> requestQueue = new Queue<UnityTetris.SceneRequestInfo> ();
				private GameState gameState;
				private bool m_acceptingRequests = true; //once a game ends, this will be triggered to false. Must be set to true before a new game.				
				private int rowTarget = 1;
				private int columnTarget = -1;
				
				public SceneManager ()
				{
						m_Factory = new ShapeFactory ();
						LoadLeaderboardScores ();
				}		

				public void SendSceneRequest (UnityTetris.SceneRequestInfo request)
				{
						requestQueue.Enqueue (request);
				}

				public void UpdateQueuedRequests ()
				{				
						if (requestQueue.Count != 0 || (!m_acceptingRequests)) {
								UnityTetris.SceneRequestInfo request = requestQueue.Dequeue (); //TODO - throttle?						
				
								switch (request.type) {
								case UnityTetris.SceneRequestInfo.Type.RotateShapeRequest:
										{
												HandleRotateRequest (request);
												break;
										}
								case UnityTetris.SceneRequestInfo.Type.TranslateShapeRequest:
										{
												HandleTranslateRequest (request);
												break;
										}
								case UnityTetris.SceneRequestInfo.Type.ChangeGameStateRequest:
										{
												HandleChangeGameStateRequest (request);
												break;
										}
								default:
										{
												UnityEngine.Debug.LogWarning ("No type sent on SceneRequestInfo request... this is probably bad!");
												break;
										}
								}
						}
				}
						
				private void HandleTranslateRequest (UnityTetris.SceneRequestInfo request)
				{
						if (gameState == GameState.Paused || m_CurrentShape == null)
								return;							
						
						UnityEngine.Vector3 movementVector = request.translationData.movementVector;
						if (rowTarget <= 0 && columnTarget >= 0) {
								List<KeyValuePair<int, int>> rowCols = m_CurrentShape.GetFilledGridValues ();								
								//if (rowTarget < rowCols [0].Key)
								//		movementVector.y = -1;
								if (rowTarget > rowCols [0].Key)
										movementVector.y = 1;
								if (columnTarget < rowCols [0].Value)
										movementVector.x = -1;
								if (columnTarget > rowCols [0].Value)
										movementVector.x = 1;
						}				

						if (AssemblyCSharp.UnityTetris.sceneMgr.m_CurrentShape.CheckCollisionWithBotWall (movementVector) || DoAnyShapesCollideInScene (movementVector)) {
								//m_CurrentShape.PlayCollisionAudio ();
								++m_PlacedBlockCount;
								m_ListOfShapes.Add (m_CurrentShape);

								AI aiTest = new AI ();
								int score = aiTest.ComputeScore (m_CurrentShape, m_SceneGrid); //change from being current shape to prediction...
								foo++;
								UnityEngine.Debug.Log (foo + "AI score of placed block: " + score);				

								AddCurrentShapeToSceneBitGrid (true);
								m_SceneGrid.UpdateRowBytes ();

						
				
								//Handle game end condition
								if (AssemblyCSharp.UnityTetris.sceneMgr.m_CurrentShape.CheckCollisionWithTopWall (0, 0)) {
										UnityEngine.GameObject.Find ("background").audio.Play ();
										//EndGame ();
										//todo - fix
										UnityTetris.SceneRequestInfo request2 = new UnityTetris.SceneRequestInfo ();
										request2.gameStateData.changeGameStateTo = AssemblyCSharp.ChangeGameState.EndGame;
										HandleChangeGameStateRequest (request2);
										return;
								}
				
								UnityEngine.Debug.Log ("Before deleting anything...");
								m_SceneGrid.PrintBitArray ();
				
								//Detect full rows and delete/shift
								List<int> fullRows = m_SceneGrid.GetFullRows (); //it'll be ordered 0 to 24
				
								//Delete full rows in UI and in the grid
								foreach (int row in fullRows) {
										foo++;
										UnityEngine.Debug.Log ("Row " + row + " is full. Deleting now..." + foo);
										DeleteRowInUI (row + 1); //need to -1 because row positions for the shapes are -1 to -25, not 0 to -24, gets converted to negative in func
										m_SceneGrid.DeleteRow (row);
								}
				
								//Switch to previewed Shape and generate a new one															
								m_CurrentShape = m_PreviewShape;																
								m_CurrentShape.TranslateToInitialPlacement ();
								m_PreviewShape = m_Factory.SpawnRandomizedTetrisShape ();

								List<KeyValuePair<KeyValuePair<int, int>, ChangeThis>> scores = new List<KeyValuePair<KeyValuePair<int, int>, ChangeThis>> ();
								AI aiTest2 = new AI ();
								for (int i = 0; i < m_RowCount; ++i) {
										for (int j = 0; j < m_ColumnCount; ++j) {
												//int score2 = aiTest.ComputeScore (m_CurrentShape, m_SceneGrid, i, j); //change from being current shape to prediction...
												AssemblyCSharp.ChangeThis score2 = aiTest.ComputeScore (m_CurrentShape, m_SceneGrid, i, j); //change from being current shape to prediction...
												if (score2.score > 0) {
														scores.Add (new KeyValuePair<KeyValuePair<int, int>, ChangeThis> (new KeyValuePair<int, int> (i, j), score2));
														foo++;
														UnityEngine.Debug.Log (foo + "Non zero AI score found: " + score2.score + " Row: " + i + " Column: " + j + " Rots: " + score2.numberOfRotations);			
												}						
												//UnityEngine.Debug.Log (foo + "AI score of placed block: " + score);			
										}
								}
					
								int numOfRots = 0;
								if (scores.Count > 0) {
										int targetScore = scores.Max (x => x.Value.score);
										List<KeyValuePair<KeyValuePair<int, int>, ChangeThis>> targets = scores.Where (x => x.Value.score == targetScore).ToList ();
										KeyValuePair<int, int> target = new KeyValuePair<int, int> ();
										if (targets.Count > 1) {
												target = targets.OrderByDescending (x => x.Key.Key).First ().Key;
												numOfRots = targets.OrderByDescending (x => x.Key.Key).First ().Value.numberOfRotations;
										} else if (targets.Count == 1) {
												target = targets [0].Key;
												numOfRots = targets [0].Value.numberOfRotations;
										} else
												return;
										rowTarget = target.Key * -1;
										columnTarget = target.Value;
										for (int rot = 0; rot < numOfRots; ++rot) {
												m_CurrentShape.Rotate ();
										}
										foo++;
										UnityEngine.Debug.Log (foo + "rowTarget: " + rowTarget + " columnTarget: " + columnTarget + " rotation: " + numOfRots);
								}
								//myB.PrintBitArray ();
				
						} else if (!AssemblyCSharp.UnityTetris.sceneMgr.m_CurrentShape.CheckCollisionWithLeftWall (movementVector) &&
								!AssemblyCSharp.UnityTetris.sceneMgr.m_CurrentShape.CheckCollisionWithRightWall (movementVector)) {

							
								m_CurrentShape.translate (movementVector);
						}
				}
				private void HandleRotateRequest (UnityTetris.SceneRequestInfo request)
				{
						//TODO - someday move rotate out of shape...
						m_CurrentShape.Rotate ();
				}
				private void HandleChangeGameStateRequest (UnityTetris.SceneRequestInfo request)
				{
						switch (request.gameStateData.changeGameStateTo) {
						case AssemblyCSharp.ChangeGameState.ClearGame:
								{
										foreach (Shape s in m_ListOfShapes) {
												s.DeleteShape ();
										}
										if (m_CurrentShape != null)
												m_CurrentShape.DeleteShape ();
										if (m_PreviewShape != null)
												m_PreviewShape.DeleteShape ();
										m_ListOfShapes.Clear ();						
										m_CurrentShape = null;
										m_PlacedBlockCount = 0;
										break;
								}
						case AssemblyCSharp.ChangeGameState.PauseGame:
								{										
										gameState = GameState.Paused;
										break;
								}
						case AssemblyCSharp.ChangeGameState.ResumeGame:
								{										
										gameState = GameState.Running;
										break;
								}
						case AssemblyCSharp.ChangeGameState.StartGame:
								{
										m_CurrentShape = m_Factory.SpawnRandomizedTetrisShape ();
										m_CurrentShape.TranslateToInitialPlacement ();										
										m_PreviewShape = m_Factory.SpawnRandomizedTetrisShape ();
										m_IsGameOver = false;
										gameState = GameState.Running;
										break;
								}
						case AssemblyCSharp.ChangeGameState.EndGame:
								{					
										m_acceptingRequests = false; //TODO - make sure I can't get in a state where I have actions executed in the queue after the game ended
										if (!m_IsGameOver) {
												SaveLeaderboardScores ();
												m_PreviewShape.DeleteShape ();				
												m_IsGameOver = true;								
										}
										gameState = GameState.Paused;
										break;													
								}
						}				
				}

				private void SaveLeaderboardScores ()
				{
						List<LeaderboardScore> highScores = LoadLeaderboardScores ();
						try {
								highScores.Add (new LeaderboardScore (System.Environment.MachineName, m_PlacedBlockCount, DateTime.Now, "1.0.0"));
								m_HighScores = highScores; //update public exposed leaderboard for GUI
								string json = JsonConvert.SerializeObject (highScores, Formatting.Indented);
								System.IO.File.WriteAllText (@"Leaderboard.txt", json);
						} catch (Exception ex) {
								UnityEngine.Debug.LogWarning ("Error writing leaderboard scores: " + ex.Message);
						}
				}
				public List<LeaderboardScore> LoadLeaderboardScores () //todo - make private, fix issue where leaderboard doesn't update right after a game for some reason...
				{
						List<LeaderboardScore> highScores = new List<LeaderboardScore> ();
						try {
								string json;
								using (System.IO.StreamReader file = new System.IO.StreamReader(@"Leaderboard.txt", true)) { 
										json = file.ReadToEnd ();
								}
								highScores = JsonConvert.DeserializeObject<List<LeaderboardScore>> (json);
								highScores = highScores.OrderByDescending (x => x.Score).ToList ();
								m_HighScores = highScores; //update public exposed leaderboard for GUI
						} catch (Exception ex) {
								UnityEngine.Debug.LogWarning ("Error loading leaderboard scores: " + ex.Message);
						}
						return highScores;
				}

				public void AddCurrentShapeToSceneBitGrid (bool val)
				{		
						List<KeyValuePair<int, int>> rowCols = m_CurrentShape.GetFilledGridValues ();
						foreach (KeyValuePair<int,int> rowCol in rowCols) {
								m_SceneGrid [rowCol.Key, rowCol.Value] = val;
						}
				}

				public bool DoAnyShapesCollideInScene (UnityEngine.Vector3 movementVector)
				{
						foreach (Shape shape in m_ListOfShapes) { //for each object in the scene that is colliable
								if (m_CurrentShape.collides (shape, movementVector))
										return true;
						}
						return false;
				}
		
				private void DeleteRowInUI (int row)
				{
						//Note: Actual object destruction is always delayed until after the current Update loop, but will always be done before rendering.
						//https://docs.unity3d.com/Documentation/ScriptReference/Object.Destroy.html
			
						foo++;
						UnityEngine.Debug.Log ("(Row + " + (row - 1) + ") Deleting x = : " + row + " in the UI." + foo);
						List<Shape> shapesToRemove = new List<Shape> ();
						foreach (Shape s in m_ListOfShapes) {								
								if (s.DeleteBlocksInRow (row * -1) == 0) {//TODO, fix all my -1 crap. I have to translate this to acutal game pos, which is negative
										shapesToRemove.Add (s); //can't modify list while I'm iterating through it, mark for delete
								}
						}
			
						foreach (Shape s in shapesToRemove) {
								UnityEngine.Debug.Log (s.Name + " has been completely destroyed.");
								m_ListOfShapes.Remove (s);
								s.DeleteShape ();
						}
			
						foreach (Shape s2 in m_ListOfShapes) {										
								s2.ShiftBlocksAboveDeletedRow (row * -1);										
						}
			
						//Debug printing...
						/*string shapeList = "List of shapes(" + m_ListOfShapes.Count + "): " + Environment.NewLine;
			foreach (Shape s in m_ListOfShapes) {
				shapeList += s.Name + Environment.NewLine;
			}
			UnityEngine.Debug.Log (shapeList);*/
				}
		}
}
