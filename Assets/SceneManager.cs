//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1022
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated. 
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.IO;
namespace AssemblyCSharp
{
		
		//The SceneManager class is responsible for
		// - game state
		// - main game tick function
		//TODO - also fix some using of member varibles as globals more like
		public class SceneManager
		{
				enum GameState
				{
						None,
						Paused,
						Running
				}							

				//For these member variables surfaced outside of class, only expose as read-only
				public Shape CurrentShape { get { return m_CurrentShape; } }
				public List<LeaderboardScore> HighScores { get { return m_HighScores; } }
				public int PlacedBlockCount { get { return m_PlacedBlockCount; } }
		
				private ShapeFactory m_Factory;
				private Shape m_CurrentShape;
				private Shape m_PreviewShape;
				private List<LeaderboardScore> m_HighScores = new List<LeaderboardScore> ();
				private int m_PlacedBlockCount = 0;				
				private bool m_IsGameOver = false;
				private System.Collections.ArrayList m_ListOfShapes = new System.Collections.ArrayList ();
				private static int m_ColumnCount = 8; //must match the Unity grid
				private static int m_RowCount = 24;
				private TetrisBitArray m_SceneGrid = new TetrisBitArray (m_RowCount, m_ColumnCount);
				private Leaderboard m_Leaderboard = new Leaderboard ();
		
				private Queue<UnityTetris.SceneRequestInfo> requestQueue = new Queue<UnityTetris.SceneRequestInfo> ();
				private GameState gameState;
				private bool m_acceptingRequests = true; //once a game ends, this will be triggered to false. Must be set to true before a new game.				
				private int m_RowTarget = 1;
				private int m_ColumnTarget = -1;
				private static int debugId = 0; //Used to make debug print statements unique

				private AI aiManager = new AI ();
				
				public SceneManager ()
				{
						m_Factory = new ShapeFactory ();
						m_HighScores = m_Leaderboard.LoadLeaderboardScores ();
				}		

				public void SendSceneRequest (UnityTetris.SceneRequestInfo request)
				{
						requestQueue.Enqueue (request);
				}

				public void UpdateQueuedRequests ()
				{				
						if (requestQueue.Count != 0 || (!m_acceptingRequests)) {
								UnityTetris.SceneRequestInfo request = requestQueue.Dequeue (); //TODO - throttle?						
				
								switch (request.type) {
								case UnityTetris.SceneRequestInfo.Type.RotateShapeRequest:
										{
												HandleRotateRequest (request);
												break;
										}
								case UnityTetris.SceneRequestInfo.Type.TranslateShapeRequest:
										{
												HandleTranslateRequest (request);
												break;
										}
								case UnityTetris.SceneRequestInfo.Type.ChangeGameStateRequest:
										{
												HandleChangeGameStateRequest (request);
												break;
										}
								default:
										{
												UnityEngine.Debug.LogWarning ("No type sent on SceneRequestInfo request... this is probably bad!");
												break;
										}
								}
						}
				}
						
				private void HandleTranslateRequest (UnityTetris.SceneRequestInfo request)
				{
						if (gameState == GameState.Paused || m_CurrentShape == null)
								return;							
						
						UnityEngine.Vector3 movementVector = request.translationData.movementVector;
						
						if (request.AIModeOn) {
								if (m_RowTarget <= 0 && m_ColumnTarget >= 0) {
										List<KeyValuePair<int, int>> rowCols = m_CurrentShape.GetFilledGridValues ();																																	
										if (m_ColumnTarget < rowCols [0].Value)
												movementVector.x = -1;
										if (m_ColumnTarget > rowCols [0].Value)
												movementVector.x = 1;
								}				
						} else {
								m_RowTarget = 1;
								m_ColumnTarget = -1;

						}

						if (AssemblyCSharp.UnityTetris.sceneMgr.m_CurrentShape.CheckCollisionWithBotWall (movementVector) || DoAnyShapesCollideInScene (movementVector)) {
								//m_CurrentShape.PlayCollisionAudio ();
								++m_PlacedBlockCount;
								m_ListOfShapes.Add (m_CurrentShape);											
								AddCurrentShapeToSceneBitGrid (true);
								m_SceneGrid.UpdateRowBytes ();									
				
								//Handle game end condition
								if (AssemblyCSharp.UnityTetris.sceneMgr.m_CurrentShape.CheckCollisionWithTopWall (0, 0)) {
										UnityEngine.GameObject.Find ("background").audio.Play ();
										//EndGame ();
										//todo - fix
										UnityTetris.SceneRequestInfo request2 = new UnityTetris.SceneRequestInfo ();
										request2.gameStateData.changeGameStateTo = AssemblyCSharp.ChangeGameState.EndGame;
										HandleChangeGameStateRequest (request2);
										return;
								}
				
								UnityEngine.Debug.Log ("Before deleting anything...");
								m_SceneGrid.PrintBitArray ();
				
								//Detect full rows and delete/shift
								List<int> fullRows = m_SceneGrid.GetFullRows (); //it'll be ordered 0 to 24
				
								//Delete full rows in UI and in the grid
								foreach (int row in fullRows) {										
										UnityEngine.Debug.Log ("Row " + row + " is full. Deleting now..." + ++debugId);
										DeleteRowInUI (row + 1); //need to -1 because row positions for the shapes are -1 to -25, not 0 to -24, gets converted to negative in func
										m_SceneGrid.DeleteRow (row);
								}
				
								//Switch to previewed Shape and generate a new one															
								m_CurrentShape = m_PreviewShape;																
								m_CurrentShape.TranslateToInitialPlacement ();
								m_PreviewShape = m_Factory.SpawnRandomizedTetrisShape ();																			
								
								//If AI is turned on, calculate the best move for this new shape
								if (request.AIModeOn) {
										AIPlacementEval bestMove = aiManager.GetBestMove (m_CurrentShape, m_SceneGrid);								
										if (bestMove != null) {
												m_RowTarget = bestMove.row;
												m_ColumnTarget = bestMove.column;
												for (int rot = 0; rot < bestMove.numberOfRotations; ++rot) {
														m_CurrentShape.Rotate ();
												}
										
												UnityEngine.Debug.Log (++debugId + "rowTarget: " + bestMove.row + " columnTarget: " + bestMove.column + " rotation: " + bestMove.numberOfRotations);
										}
								}
								//myB.PrintBitArray ();
				
						} else if (!AssemblyCSharp.UnityTetris.sceneMgr.m_CurrentShape.CheckCollisionWithLeftWall (movementVector) &&
								!AssemblyCSharp.UnityTetris.sceneMgr.m_CurrentShape.CheckCollisionWithRightWall (movementVector)) {										
								m_CurrentShape.translate (movementVector);
						}
				}
				private void HandleRotateRequest (UnityTetris.SceneRequestInfo request)
				{
						//TODO - someday move rotate out of shape...
						m_CurrentShape.Rotate ();
				}
				private void HandleChangeGameStateRequest (UnityTetris.SceneRequestInfo request)
				{
						switch (request.gameStateData.changeGameStateTo) {
						case AssemblyCSharp.ChangeGameState.ClearGame:
								{
										foreach (Shape s in m_ListOfShapes) {
												s.DeleteShape ();
										}
										if (m_CurrentShape != null)
												m_CurrentShape.DeleteShape ();
										if (m_PreviewShape != null)
												m_PreviewShape.DeleteShape ();
										m_ListOfShapes.Clear ();						
										m_CurrentShape = null;
										m_PlacedBlockCount = 0;
										break;
								}
						case AssemblyCSharp.ChangeGameState.PauseGame:
								{										
										gameState = GameState.Paused;
										break;
								}
						case AssemblyCSharp.ChangeGameState.ResumeGame:
								{										
										gameState = GameState.Running;
										break;
								}
						case AssemblyCSharp.ChangeGameState.StartGame:
								{
										m_CurrentShape = m_Factory.SpawnRandomizedTetrisShape ();
										m_CurrentShape.TranslateToInitialPlacement ();										
										m_PreviewShape = m_Factory.SpawnRandomizedTetrisShape ();
										m_IsGameOver = false;
										gameState = GameState.Running;
										break;
								}
						case AssemblyCSharp.ChangeGameState.EndGame:
								{					
										m_acceptingRequests = false; //TODO - make sure I can't get in a state where I have actions executed in the queue after the game ended
										if (!m_IsGameOver) {
												m_Leaderboard.SaveLeaderboardScores (m_PlacedBlockCount);
												m_HighScores = m_Leaderboard.LoadLeaderboardScores ();
												m_PreviewShape.DeleteShape ();				
												m_IsGameOver = true;								
										}
										gameState = GameState.Paused;
										break;													
								}
						}				
				}

				

				public void AddCurrentShapeToSceneBitGrid (bool val)
				{		
						List<KeyValuePair<int, int>> rowCols = m_CurrentShape.GetFilledGridValues ();
						foreach (KeyValuePair<int,int> rowCol in rowCols) {
								m_SceneGrid [rowCol.Key, rowCol.Value] = val;
						}
				}

				public bool DoAnyShapesCollideInScene (UnityEngine.Vector3 movementVector)
				{
						foreach (Shape shape in m_ListOfShapes) { //for each object in the scene that is colliable
								if (m_CurrentShape.collides (shape, movementVector))
										return true;
						}
						return false;
				}
		
				private void DeleteRowInUI (int row)
				{
						//Note: Actual object destruction is always delayed until after the current Update loop, but will always be done before rendering.
						//https://docs.unity3d.com/Documentation/ScriptReference/Object.Destroy.html
									
						UnityEngine.Debug.Log ("(Row + " + (row - 1) + ") Deleting x = : " + row + " in the UI." + ++debugId);
						List<Shape> shapesToRemove = new List<Shape> ();
						foreach (Shape s in m_ListOfShapes) {								
								if (s.DeleteBlocksInRow (row * -1) == 0) {//TODO, fix all my -1 crap. I have to translate this to acutal game pos, which is negative
										shapesToRemove.Add (s); //can't modify list while I'm iterating through it, mark for delete
								}
						}
			
						foreach (Shape s in shapesToRemove) {
								UnityEngine.Debug.Log (s.Name + " has been completely destroyed.");
								m_ListOfShapes.Remove (s);
								s.DeleteShape ();
						}
			
						foreach (Shape s2 in m_ListOfShapes) {										
								s2.ShiftBlocksAboveDeletedRow (row * -1);										
						}
			
						//Debug printing...
						/*string shapeList = "List of shapes(" + m_ListOfShapes.Count + "): " + Environment.NewLine;
			foreach (Shape s in m_ListOfShapes) {
				shapeList += s.Name + Environment.NewLine;
			}
			UnityEngine.Debug.Log (shapeList);*/
				}
		}
}
